library(data.table)
library(pbapply)
library(x3df)
library(rgdal)
params <- list()
params$x3df <- "Z:\\GISUser\\Sascha\\VS Projects\\X3LandscapeModellingPlatform\\X3LandscapeModellingPlatform\\run\\Test_Run_aqRisk_2\\mcs\\X3XSZV952ZIGT4RIZW\\processing\\sd\\sim.x3df"
pboptions(type = "timer")
# Open the X3df
f <- x3df::Database(params$x3df, "r+")
# Get relevant scales
simulation <- f$get_dimension("time")$get_scale("simulation")
day <- f$get_dimension("time")$get_scale("day")
region <- f$get_dimension("space")$get_scale("region")
base_geometry <- f$get_dimension("space")$get_scale("base_geometry")
scale_1sqm <- f$get_dimension("space")$get_scale("1sqm")
# Get values @ simulation/region
ppm_shapefile <- 
  f$get_dataset(c(simulation, region), "ppm/shapefile")$get_values()
habitat_lulc_types <-
  f$get_dataset(c(simulation, region),
                "spray_drift/params/habitat_lulc_types")$get_values()
ep_width <-
  f$get_dataset(c(simulation, region),
                "spray_drift/params/ep_width")$get_values()
max_angular_deviation <-
  f$get_dataset(c(simulation, region),
                "spray_drift/params/max_angular_deviation")$get_values()
field_dist_sd <-
  f$get_dataset(c(simulation, region),
                "spray_drift/params/field_dist_sd")$get_values()
ep_dist_sd <-
  f$get_dataset(c(simulation, region),
                "spray_drift/params/ep_dist_sd")$get_values()
min_dist <-
  f$get_dataset(c(simulation, region),
                "spray_drift/params/min_dist")$get_values()
source_exposure <-
  f$get_dataset(c(simulation, region),
                "spray_drift/params/source_exposure")$get_values()
pdf_type <-
  f$get_dataset(c(simulation, region),
                "spray_drift/params/pdf_type")$get_values()
crop <-
  f$get_dataset(c(simulation, region), "spray_drift/params/crop")$get_values()
reporting_threshold <-
  f$get_dataset(c(simulation, region),
                "spray_drift/params/reporting_threshold")$get_values()
apply_simple1_drift_filtering <-
  f$get_dataset(c(simulation, region),
                "spray_drift/params/apply_simple1_drift_filtering")$get_values()
model_selection <-
    f$get_dataset(c(simulation, region), "spray_drift/params/model")$get_values()
spatial_output_scale <-
    f$get_dataset(c(simulation, region), "spray_drift/params/spatial_output_scale")$get_values()
random_seed <-
    f$get_dataset(c(simulation, region),
                "spray_drift/params/random_seed")$get_values()
# Get values @ simulation/base_geometry
lulc_type <-
  f$get_dataset(c(simulation, base_geometry), "lulc/lulc_type")$get_values()
# Get values @ day/region
wind_direction <-
  f$force_scaling(c(day, region),
                  "weather/wind_direction",
                  c(x3df::SimpleDownscaling(f, c(simulation, region))))
# Set seed if specified
if (random_seed != 0) {
  set.seed(random_seed)
}
# Load PPM Shapefile
ppmsf <- readOGR(dsn = dirname(ppm_shapefile), layer = substr(basename(ppm_shapefile), 1, nchar(basename(ppm_shapefile)) - 4))
# Transform dates
first_day <- h5::h5attr(day$.f, "t_offset")
ppmsf@data$tDate <- as.integer(as.Date(ppmsf@data$Date)) - first_day + 1
# Add wind directions to PPMs
ppmsf@data$Wind.dir <- wind_direction[ppmsf@data$tDate, 1]
# Random wind for applications with negative wind direction
ppmsf@data$Wind.dir[ppmsf@data$Wind.dir == 65535] <- sample(0:359, sum(ppmsf@data$Wind.dir == 65535), TRUE)
# Up-scale wind direction into 8-dir wind
ppmsf@data$Wind.dir <- cut(ppmsf@data$Wind.dir, seq(22.5, 360, 45), FALSE)
ppmsf@data$Wind.dir <- ifelse(is.na(ppmsf@data$Wind.dir), 0, ppmsf@data$Wind.dir * 45)
# Get base geometries and habitats
geometries <- base_geometry$get_geometries()
habitat_types <- as.integer(strsplit(habitat_lulc_types, ", ", TRUE)[[1]])
habitats <- subset(geometries, lulc_type[1,] %in% habitat_types)
# Prepare the exposure data
if (spatial_output_scale == "base_geometry") {
  exposure_ds <- f$get_dataset(c(day, base_geometry), "spray_drift/exposure")
} else {
  exposure_ds <- f$get_dataset(c(day, scale_1sqm), "spray_drift/exposure")
}
# Consider each application individually
exposure <- pblapply(1:nrow(ppmsf), function(i) {
  applied_geom <- ppmsf[i,]
  applied_geom_bbox <- bbox(applied_geom)  
  lroi_bbox <- applied_geom_bbox + matrix(c(-50, -50, 50, 50), 2, 2)
  lroi_bbox <- matrix(c(max(lroi_bbox[1, 1], geometries@bbox[1, 1]), max(lroi_bbox[2, 1], geometries@bbox[2, 1]), min(lroi_bbox[1, 2], geometries@bbox[1, 2]), min(lroi_bbox[2, 2], geometries@bbox[2, 2])), 2, 2)
  lroi_bbox_geom <- rgeos::bbox2SP(bbox = lroi_bbox, proj4string = geometries@proj4string)
  inner_buffer <- rgeos::gBuffer(applied_geom, TRUE, width = -2)
  if (!is.null(inner_buffer)) {
    applied_boundary <- rgeos::gDifference(applied_geom, inner_buffer, TRUE)    
    lroi_habitats <- rgeos::gIntersection(habitats, lroi_bbox_geom, TRUE, drop_lower_td = TRUE)
    if (!is.null(lroi_habitats)) {
      r <- raster::raster(xmn = lroi_bbox[1,1],
                          xmx = lroi_bbox[1,2],
                          ymn = lroi_bbox[2,1],
                          ymx = lroi_bbox[2,2],
                          crs = geometries@proj4string,
                          resolution = 1)
      r <- raster::rasterize(lroi_habitats, r, 2)
      r <- raster::rasterize(applied_geom, r, 1, update = TRUE)
      local_roi <- data.table(id = 1:raster::ncell(r), lulc = r[])[!is.na(lulc)]
      local_roi[, c("x", "y") := list(raster::xFromCell(r, id),
                                      raster::yFromCell(r, id))]
      local_roi[, ep := xdrift::bands(x,
                                      y,
                                      applied_geom@data$Wind.dir,
                                      ep_width[1, 1],
                                      "meteorological")]
      dist <-
        local_roi[,
                  list(x,
                       y,
                       dist = xdrift::mindwdist(x,
                                                y,
                                                applied_geom@data$Wind.dir,
                                                which(lulc == 1),
                                                max_angular_deviation[1, 1])),
                  ep]
      # Distance variability at the field scale
      dist.var.field <- rnorm(1, sd = field_dist_sd[1, 1])
      # Distance variability at the EP scale
      dist.var <-
        dist[, list(offset = rnorm(1, sd = ep_dist_sd [1, 1]) + dist.var.field), ep]
      setkey(dist, ep)
      setkey(dist.var, ep)
      dist <- dist.var[dist]
      dist[dist > 0,
           dist := ifelse(dist + offset > min_dist[1, 1],
                          dist + offset,
                          min_dist[1, 1])
      ]
      if (model_selection == "90thRautmann") {
        exposure_appl <- dist[, list(x, y, exposure = xdrift::rautmann90(
          dist,
          target.exposure = as.numeric(source_exposure[1, 1]),
          crop = crop[1, 1]) *
          ifelse(apply_simple1_drift_filtering[1, 1] == "TRUE",
                 1 - sample(c(.25, .5, .75, .9), 1, prob = c(.1, .5, .75, .9)), 1) *
          applied_geom@data$Rate * (1 - applied_geom@data$DriftRed)),
          ep]
      } else {
        if (model_selection == "AgDRIFT") {
          exposure_appl <- dist[, list(x, y, exposure = xdrift::agdrift(
            dist,
            target.exposure = as.numeric(source_exposure[1, 1])) *
            ifelse(apply_simple1_drift_filtering[1, 1] == "TRUE",
              1 - sample(c(.25, .5, .75, .9), 1, prob = c(.1, .5, .75, .9)), 1) *
              applied_geom@data$Rate * (1 - applied_geom@data$DriftRed)),
            ep]
         } else {
           exposure_appl <- dist[, list(x, y, exposure = xdrift::xspraydrift(
             dist,
             target.exposure = as.numeric(source_exposure[1, 1]),
             crop = crop[1, 1],
             pdf.type = pdf_type[1, 1]) *
             ifelse(apply_simple1_drift_filtering[1, 1] == "TRUE",
               1 - sample(c(.25, .5, .75, .9), 1, prob = c(.1, .5, .75, .9)), 1) *
               applied_geom@data$Rate * (1 - applied_geom@data$DriftRed)),
             ep]
         }
      }
      # Filter values and save results
      if(spatial_output_scale == "base_geometry") {
        exposure_appl <- exposure_appl[exposure >= reporting_threshold[1, 1]]
        if (nrow(exposure_appl) > 0)
          data.table(x = exposure_appl[, x], y = exposure_appl[, y], t = applied_geom@data$tDate, exposure = exposure_appl[, exposure])
        else
          NULL
      } else {
        exposure_appl <- exposure_appl[exposure >= reporting_threshold[1, 1]]
        if (nrow(exposure_appl) > 0) {
          idx <- exposure_appl[, scale_1sqm$t(cbind(x + 1, y + 1))]
          exposure_appl[, c("i", "j") := .(idx[, 1], idx[, 2])]
          exposure_appl <- exposure_appl[i %between% c(1, exposure_ds$.f@dim[2]) & j %between% c(1, exposure_ds$.f@dim[3])]
          ll <- exposure_appl[, cbind(min(i), min(j))]
          ru <- exposure_appl[, cbind(max(i), max(j))]
          ds <- h5::selectDataSpace(exposure_ds$.f, c(applied_geom@data$tDate, ll[1, 1], ll[1, 2]), c(1, ru[1, 1] - ll[1, 1] + 1, ru[1, 2] - ll[1, 2] + 1))
          exposure <- h5::readDataSet(exposure_ds$.f, ds)
          coords <- cbind(1, exposure_appl[, i], exposure_appl[, j])
          coords[, 2] <- coords[, 2] - ll[1, 1] + 1
          coords[, 3] <- coords[, 3] - ll[1, 2] + 1
          exposure[coords] <- exposure[coords] + exposure_appl[, exposure]
          ds <- h5::selectDataSpace(exposure_ds$.f, c(applied_geom@data$tDate, ll[1, 1], ll[1, 2]), c(1, ru[1, 1] - ll[1, 1] + 1, ru[1, 2] - ll[1, 2] + 1))
          h5::writeDataSet(exposure_ds$.f, exposure, ds)
        }
      }
    }
  }
})
exposure
  exposure <- rbindlist(exposure)
  exposure <- exposure[exposure > 0, .(exposure = sum(exposure)), .(x, y, t)]
exposure
  idx <- exposure[, scale_1sqm$t(cbind(x + 1, y + 1))]
idx
  exposure <- data.table(x = idx[, 1], y = idx[, 2], t = exposure[, t], exposure = exposure[, exposure])
exposure
  setkeyv(exposure, c("x", "y"))
exposure
i <- 1
      habitat <- geometries[i,]
habitat
      r <- raster::raster(xmn = habitat@bbox[1,1],
        xmx = habitat@bbox[1,2],
        ymn = habitat@bbox[2,1],
        ymx = habitat@bbox[2,2],
        crs = geometries@proj4string,
        resolution = 1)
r
      r <- raster::rasterize(habitat, r, 0)
plot(r)
r[]
      dt <- data.table(id = 1:raster::ncell(r), lulc = r[])[!is.na(lulc)]
dt
      dt[, c("x", "y") := list(raster::xFromCell(r, id), raster::yFromCell(r, id))]
dt
      idx <- dt[, scale_1sqm$t(cbind(x + 1, y + 1))]
idx
      dt <- data.table(x = idx[, 1], y = idx[, 2])
dt
      habitat_exposure <- exposure[dt]
habitat_exposure
        habitat_exposure <- habitat_exposure[!is.na(t), sum(exposure) / dt[, .N], t]
habitat_exposure
        sapply(1:nrow(habitat_exposure), function(j) {
          exposure_ds$.f[habitat_exposure[j, t], i] <- habitat_exposure[j, V1]
        })
exposure_ds$.f[habitat_exposure[j, t], i] <- habitat_exposure[j, V1]
j <- 1
 habitat_exposure[j, V1]
  exposure_ds$.f[habitat_exposure[j, t], i
    exposure_ds$.f[habitat_exposure[j, t], i] 
q()
